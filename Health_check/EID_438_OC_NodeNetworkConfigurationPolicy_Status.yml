---
- name: Check OC NodeNetworkConfigurationPolicy Status
  hosts: oc_nodes
  gather_facts: no

  vars:
    additional_info: []
    GENERATE_EVENT: false

  tasks:

    - name: Run 'oc get nncp -A' and capture output
      shell: oc get nncp -A --no-headers
      register: nncp_output
      changed_when: false

    - name: Print nncp_output
      debug:
        msg:
          nncp_output: "{{ nncp_output }}"

    - name: Stub NNCP output for testing (optional)
      # Uncomment this block to simulate healthy output
      set_fact:
        nncp_output:
          stdout_lines:
            - "vlan-bond1-maclvan-lrb2161-policy     Available   SuccessfullyConfigured"
            - "vlan-bond1-maclvan-lrb2337-policy     Available   SuccessfullyConfigured"

    - name: Parse NNCP output and check for unhealthy states
      set_fact:
        additional_info: "{{ additional_info + [{
          'INFO': item.split()[0] + ' : ' + unhealthy_fields | join(','),
          'STATE': 'NOK',
          'CHECK': 'OC NodeNetworkConfigurationPolicy Status'
        }] }}"
        GENERATE_EVENT: true
      loop: "{{ nncp_output.stdout_lines }}"
      loop_control:
        label: "{{ item.split()[0] }}"
      vars:
        fields: "{{ item.split() }}"
        unhealthy_fields: >-
          {{
            [
              ('STATUS=' ~ fields[1]) if fields[1] != 'Available' else '',
              ('REASON=' ~ fields[2]) if fields[2] != 'SuccessfullyConfigured' else ''
            ] | reject('match', '^$') | list
          }}
      when: fields[1] != 'Available' or fields[2] != 'SuccessfullyConfigured'

    - name: Set OK status if no issues found
      set_fact:
        additional_info: [{
          'INFO': '',
          'STATE': 'OK',
          'CHECK': 'OC NodeNetworkConfigurationPolicy Status'
        }]
      when: additional_info | length == 0

    - name: STATUS
      debug:
        msg:
          GENERATE_EVENT: "{{ GENERATE_EVENT }}"
          Additional_Info: "{{ additional_info }}"
