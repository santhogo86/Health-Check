---
- name: Check OpenShift MCP Status
  hosts: oc_nodes
  gather_facts: no

  vars:
    additional_info: []
    GENERATE_EVENT: false

  tasks:

    - name: Run 'oc get mcp' and capture output
      shell: oc get mcp
      register: mcp_output
      changed_when: false

    - name: Print mcp_output
      debug:
        msg:
          mcp_output: "{{ mcp_output }}"

#    - name: Stub MCP output for testing (all healthy)
#      set_fact:
#        mcp_output:
#          stdout_lines:
#            - "NAME                 CONFIG                                                         UPDATED   UPDATING   DEGRADED   MACHINECOUNT   READYMACHINECOUNT   UPDATEDMACHINECOUNT   DEGRADEDMACHINECOUNT   AGE"
#            - "master               rendered-master-a77401b7647fde620631222de871e433               True      False      False      3              3                   3                     0                      320d"
#            - "worker               rendered-worker-86d3a2e886951bb1eaf3fb4bcbef2da1               True      False      False      3              3                   3                     0                      320d"


    - name: Parse MCP output and check for unhealthy states
      set_fact:
        additional_info: "{{ additional_info + [{
          'INFO': 'MCP ' + fields[0] + '/' + fields[1] + ' is not healthy: ' + unhealthy_fields | join(','),
          'STATE': 'NOK',
          'CHECK': 'OC MachineConfigPool Status'
        }] }}"
        GENERATE_EVENT: true
      loop: "{{ mcp_output.stdout_lines[1:] }}"
      loop_control:
        label: "{{ item.split()[0] }}"
      vars:
        fields: "{{ item.split() }}"
        unhealthy_fields: >-
          {{
            [
              ('UPDATED=' ~ fields[2]) if fields[2] != 'True' else '',
              ('UPDATING=' ~ fields[3]) if fields[3] != 'False' else '',
              ('DEGRADED=' ~ fields[4]) if fields[4] != 'False' else ''
            ] | reject('match', '^$') | list
          }}
      when: fields[2] != 'True' or fields[3] != 'False' or fields[4] != 'False'


#    - name: Parse MCP output and check for unhealthy states
#      set_fact:
#        additional_info: "{{ additional_info + [{
#          'INFO': 'MCP ' + fields[0] + '/' + fields[1] + ' is not healthy: ' + unhealthy_fields | join(','),
#          'STATE': 'NOK',
#          'CHECK': 'OC MachineConfigPool Status'
#        }] }}"
#        GENERATE_EVENT: true
#      loop: "{{ mcp_output.stdout_lines[1:] }}"
#      loop_control:
#        label: "{{ item.split()[0] }}"
#      vars:
#        fields: "{{ item.split() }}"
#        unhealthy_fields: >-
#          {{
#            [
#              ('UPDATED=' + fields[2]) if fields[2] != 'True' else '',
#              ('UPDATING=' + fields[3]) if fields[3] != 'False' else '',
#              ('DEGRADED=' + fields[4]) if fields[4] != 'False' else ''
#            ] | reject('equalto', '') | list
#          }}
#      when: fields[2] != 'True' or fields[3] != 'False' or fields[4] != 'False'

#    - name: Parse MCP output and check for unhealthy states
#      set_fact:
#        additional_info: "{{ additional_info + [{
#          'INFO': 'MCP ' + fields[0] + '/' + fields[1] + ' is not healthy: ' + [ 
#            (fields[2] != 'True') | ternary('UPDATED=' + fields[2], ''),
#            (fields[3] != 'False') | ternary('UPDATING=' + fields[3], ''),
#            (fields[4] != 'False') | ternary('DEGRADED=' + fields[4], '')
#          ] | select('!=', '') | join(','),
#          'STATE': 'NOK',
#          'CHECK': 'OC MachineConfigPool Status'
#        }] }}"
#        GENERATE_EVENT: true
#      loop: "{{ mcp_output.stdout_lines[1:] }}"
#      loop_control:
#        label: "{{ item.split()[0] }}"
#      vars:
#        fields: "{{ item.split() }}"
#      when: >
#        item.split()[2] != 'True' or
#        item.split()[3] != 'False' or
#        item.split()[4] != 'False'


#    - name: Parse MCP output and check for unhealthy states
#      set_fact:
#        additional_info: >-
#          {{ additional_info + [{
#            'INFO': 'MCP ' + item.split()[0] + '/' + item.split()[1] + ' is not healthy: ' +
#                    (item.split()[2] != 'True' | ternary('UPDATED=' + item.split()[2], '')) +
#                    (item.split()[3] != 'False' | ternary(',UPDATING=' + item.split()[3], '')) +
#                    (item.split()[4] != 'False' | ternary(',DEGRADED=' + item.split()[4], '')),
#            'STATE': 'NOK',
#            'CHECK': 'OC MachineConfigPool Status'
#          }] }}
#        GENERATE_EVENT: true
#      loop: "{{ mcp_output.stdout_lines[1:] }}"
#      when: >
#        item.split()[2] != 'True' or
#        item.split()[3] != 'False' or
#        item.split()[4] != 'False'

#    - name: Parse MCP output and check for unhealthy states
#      set_fact:
#        additional_info: "{{ additional_info + [{
#          'INFO': 'MCP {{ item.0 }} is not healthy: ' + item.1,
#          'STATE': 'NOK',
#          'CHECK': 'OC MachineConfigPool Status'
#        }] }}"
#        GENERATE_EVENT: true
#      loop: "{{ mcp_output.stdout_lines[1:] | map('split') | list | map('extract_mcp_issues') | selectattr('1', '!=', '') | list }}"
#      vars:
#        # Custom filter to extract issues from each line
#        extract_mcp_issues: >
#          {{
#            lambda fields: [
#              fields[0],
#              (
#                ('UPDATED=' + fields[2] if fields[2] != 'True' else '') +
#                (',UPDATING=' + fields[3] if fields[3] != 'False' else '') +
#                (',DEGRADED=' + fields[4] if fields[4] != 'False' else '')
#              ).lstrip(',')
#            ]
#          }}
#      when: mcp_output.stdout_lines | length > 1

    - name: Set OK status if no issues found
      set_fact:
        additional_info: [{
          'INFO': '',
          'STATE': 'OK',
          'CHECK': 'OC MachineConfigPool Status'
        }]
      when: additional_info | length == 0

    - name: STATUS
      debug:
        msg:
          GENERATE_EVENT: "{{ GENERATE_EVENT }}"
          Additional_Info: "{{ additional_info }}"

