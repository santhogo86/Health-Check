---
- name: Check for duplicate IPs
  hosts: remote_machines
  gather_facts: no
  vars_files:
    - vars_working.yml
  vars:
    additional_info: []
    ip_addresses_dict: {}

  tasks:

  - name: Get IP addresses
    raw: kubectl exec {{ pod_name_vlbfe }} -n {{ namespace }} -- ip a | grep inet | grep -Ev 'inet6|127.0.0.1|tun-' | awk -F 'inet ' '{print $2}' | cut -d '/' -f1
    register: ip_addresses
    changed_when: false

#  - name: Inject fake duplicate IPs for testing
#    set_fact:
#      ip_addresses:
#        stdout_lines: "{{ ip_addresses.stdout_lines + ['10.20.102.94'] }}"

  - name: Build IP to host mapping
    set_fact:
      ip_addresses_dict: >-
        {{
          ip_addresses_dict | combine({
            item: (ip_addresses_dict[item] | default([])) + [inventory_hostname]
          })
        }}
    loop: "{{ ip_addresses.stdout_lines }}"

  - name: Identify duplicate IPs
    set_fact:
      additional_info: >-
        {{
          additional_info + [{
            'INFO': 'Duplicate ip ' + item.key + ' found in ' + (pod_name_vlbfe | string),
            'STATE': 'NOK',
            'CHECK': 'K8S Duplicate ip check'
          }]
        }}
      GENERATE_EVENT: true
    loop: "{{ ip_addresses_dict | dict2items }}"
    when: item.value | length > 1

  - name: Set GENERATE_EVENT to false if no duplicates
    set_fact:
      GENERATE_EVENT: false
    when: GENERATE_EVENT is not defined

  - name: Add OK status if no duplicates
    set_fact:
      additional_info: >-
        {{
          [{'INFO': 'No duplicates found', 'STATE': 'OK', 'CHECK': 'K8S Duplicate ip check'}]
        }}
    when: additional_info | length == 0

  - name: STATUS
    debug:
      msg:
        GENERATE_EVENT: "{{ GENERATE_EVENT }}"
        Additional_Info: "{{ additional_info }}"

